[{"C:\\Users\\User\\Documents\\cotizador-salud\\src\\index.tsx":"1","C:\\Users\\User\\Documents\\cotizador-salud\\src\\App.tsx":"2","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\home.tsx":"3","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\headMessage.tsx":"4","C:\\Users\\User\\Documents\\cotizador-salud\\src\\routes\\AppRouter.tsx":"5","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\stepTwo.tsx":"6","C:\\Users\\User\\Documents\\cotizador-salud\\src\\routes\\AuthRouter.tsx":"7","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\stepOne.tsx":"8","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\input.tsx":"9","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Form.tsx":"10","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\checkBox.tsx":"11","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\button.tsx":"12","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Publicidad.tsx":"13","C:\\Users\\User\\Documents\\cotizador-salud\\src\\hooks\\useValidateInput.tsx":"14","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\selectComponent.tsx":"15","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\List.tsx":"16","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\templates\\Template.tsx":"17","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\CardPlan.tsx":"18","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Planes.tsx":"19","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Beneficios.tsx":"20","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\ListCard.tsx":"21","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Servicios.tsx":"22","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\Steps.tsx":"23","C:\\Users\\User\\Documents\\cotizador-salud\\src\\contexts\\appContext.tsx":"24","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\templates\\Register.tsx":"25","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\Radio.tsx":"26"},{"size":157,"mtime":1612496281910,"results":"27","hashOfConfig":"28"},{"size":175,"mtime":1612496308162,"results":"29","hashOfConfig":"28"},{"size":2246,"mtime":1612987274485,"results":"30","hashOfConfig":"28"},{"size":473,"mtime":1612985017901,"results":"31","hashOfConfig":"28"},{"size":489,"mtime":1612493108880,"results":"32","hashOfConfig":"28"},{"size":242,"mtime":1612967014160,"results":"33","hashOfConfig":"28"},{"size":648,"mtime":1612970126700,"results":"34","hashOfConfig":"28"},{"size":172,"mtime":1612984478941,"results":"35","hashOfConfig":"28"},{"size":1238,"mtime":1612915945681,"results":"36","hashOfConfig":"28"},{"size":5139,"mtime":1612992377612,"results":"37","hashOfConfig":"28"},{"size":709,"mtime":1612580571532,"results":"38","hashOfConfig":"28"},{"size":303,"mtime":1612995011707,"results":"39","hashOfConfig":"28"},{"size":380,"mtime":1612982957129,"results":"40","hashOfConfig":"28"},{"size":2687,"mtime":1612988050821,"results":"41","hashOfConfig":"28"},{"size":338,"mtime":1612833297193,"results":"42","hashOfConfig":"28"},{"size":1280,"mtime":1612924530946,"results":"43","hashOfConfig":"28"},{"size":3840,"mtime":1612991816594,"results":"44","hashOfConfig":"28"},{"size":1023,"mtime":1612979080147,"results":"45","hashOfConfig":"28"},{"size":1275,"mtime":1612979769165,"results":"46","hashOfConfig":"28"},{"size":1156,"mtime":1612981411949,"results":"47","hashOfConfig":"28"},{"size":1228,"mtime":1612982685993,"results":"48","hashOfConfig":"28"},{"size":1935,"mtime":1612982639956,"results":"49","hashOfConfig":"28"},{"size":424,"mtime":1612985301728,"results":"50","hashOfConfig":"28"},{"size":87,"mtime":1612983289728,"results":"51","hashOfConfig":"28"},{"size":4738,"mtime":1612991730923,"results":"52","hashOfConfig":"28"},{"size":1078,"mtime":1612990677950,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1u3buyk",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\User\\Documents\\cotizador-salud\\src\\index.tsx",[],["119","120"],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\App.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\home.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\headMessage.tsx",["121"],"\r\ntype Head = {\r\n    title : string,\r\n    resalt : string,\r\n    subtitle : string,\r\n}\r\nfunction Head (props :{head :Head} ): JSX.Element {\r\n    const { head } = props ;\r\n    return (\r\n        <header className=\"head\">\r\n            <h2 className=\"head__title\">{head.title}\r\n                <b className=\"head__resalt\"> {head.resalt}</b>\r\n            </h2>\r\n            <p className=\"head__subtitle\">{head.subtitle}</p>  \r\n        </header>\r\n    );\r\n}\r\nexport default Head ;","C:\\Users\\User\\Documents\\cotizador-salud\\src\\routes\\AppRouter.tsx",["122"],"import {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    withRouter\r\n  } from 'react-router-dom';\r\n\r\nimport Home from '../components/home';\r\nimport AuthRouter  from './AuthRouter';\r\n\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path='/register' component = { AuthRouter }/>\r\n        <Route path='/' component = { Home }/>\r\n        <Redirect to='/'/>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n  \r\nexport default AppRouter;","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\stepTwo.tsx",["123","124"],"import { AppContext } from \"contexts/appContext\";\r\nimport Template from \"./partials/templates/Template\";\r\nimport { useState } from 'react';\r\n\r\nconst StepTwo = () => {\r\n    \r\n    return (\r\n      <Template/>\r\n    )\r\n}\r\n\r\nexport default StepTwo;","C:\\Users\\User\\Documents\\cotizador-salud\\src\\routes\\AuthRouter.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\stepOne.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\input.tsx",["125","126"],"import {useEffect, useState } from 'react';\r\nimport {useValidateInput } from '../../hooks/useValidateInput' \r\n\r\nexport const Input = (props : any ) => {\r\n    \r\n    const [  stateInput , handleInputChange ] = useValidateInput({\r\n        name: props.name ,\r\n        value: '',\r\n        error : {\r\n            isError : false,\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        props.setInputValue( stateInput );\r\n    }, [stateInput])\r\n\r\n    return (\r\n        <div \r\n            onFocus ={ props.onFocus }\r\n            className='elementForm'\r\n        >\r\n            <label \r\n                className={ props.className } \r\n                htmlFor={props.name}\r\n            >\r\n                { props.labelText }\r\n            </label>\r\n            <input \r\n                onBlur = { props.handleType }\r\n                onChange = { (event: { target: HTMLInputElement} ) => handleInputChange ( event ) }\r\n                name = { stateInput.name }\r\n                className = { stateInput.error.isError ? 'elementForm__input elementForm__input--error' :'elementForm__input'}\r\n                type = { props.type }\r\n                autoComplete='none'\r\n                value = {stateInput.value}\r\n            />\r\n       </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Form.tsx",["127","128","129"],"import { useState ,Fragment } from 'react';\r\nimport { CheckBox } from './checkBox';\r\nimport { Input } from './input';\r\nimport { ButtonForm } from './button';\r\nimport { SelectComponent } from './selectComponent';\r\nimport { Radio } from './atoms/Radio';\r\n\r\ntype ErrorInput = {\r\n    isError : boolean, \r\n    details: string\r\n}\r\ntype Input = {\r\n    name: string,\r\n    labelText : string,\r\n    type: string,\r\n    value : string,\r\n    error : ErrorInput\r\n}\r\ntype Check = {\r\n    checked : boolean ,\r\n    condition : string\r\n }\r\n type Button =  {\r\n    type : string,\r\n    text : string\r\n}\r\ntype Form = {\r\n    \r\n    inputSelect :string,\r\n    select : string,\r\n    inputs : Array<Input>\r\n    checks? : Array<Check>,\r\n    button:Button,\r\n    radios? : Array<Radio>\r\n}\r\ntype Radio = {\r\n    names: string,\r\n    title : string ,\r\n    option : Array<string>\r\n}\r\n\r\n\r\nfunction Form ( props : {initialState : Form}) {\r\n    const {initialState} = props;\r\n    const [ state , setState ] = useState(initialState);\r\n    const inputFocus = (event: { target: HTMLInputElement}) => {\r\n        const { target } = event ;\r\n        target.name === 'date' && ( state.inputs[1].type = 'date');\r\n        \r\n        setState({\r\n            ...state,\r\n            inputSelect : target.name        \r\n        })\r\n     }\r\n    const selectChange = (event: { target : HTMLSelectElement}) => {\r\n         setState({\r\n            ...state ,\r\n            select: event.target.value\r\n         })\r\n     }\r\n    const setInputValue = ( stateInput : any) => {\r\n        const newInputs = state.inputs.map( input => {\r\n            if( input.name === stateInput.name ) {\r\n                input.value = stateInput.value;\r\n                input.error = stateInput.error;\r\n            };\r\n            return input \r\n        });\r\n        setState({\r\n            ...state ,\r\n            inputs: newInputs\r\n        })\r\n     }\r\n    const handleType = (event: { target: HTMLInputElement}) => {\r\n        const {target} = event;\r\n        target.name === 'date' && ( state.inputs[1].type = 'text');\r\n    }\r\n    return (\r\n        <form className='Form'>\r\n            {state.inputs.map( (input ,index ) => \r\n                { return index === 0 \r\n                    ? \r\n                    <Fragment key = {index}>\r\n                    <div\r\n                        className=\"Form__group\" \r\n                    >\r\n                      <SelectComponent\r\n                        selectChange = {selectChange}\r\n                        \r\n                      /> \r\n                        <Input\r\n                            setInputValue = { setInputValue  } \r\n                            onFocus={ inputFocus }\r\n                            className = {`elementForm__label ${state.inputSelect === input.name || input.value !=='' ? 'elementForm__label--active' : ''}`}\r\n                            name ={input.name}\r\n                            type ={input.type}\r\n                            labelText ={input.labelText}\r\n                         /> \r\n                    </div>\r\n                    { state.inputs[index].error.isError && <div className=\"Form__error\"> { state.inputs[index].error.details }</div> }\r\n                    </Fragment>\r\n                    :\r\n                    <Fragment key = {index}>\r\n                    <Input\r\n                        handleType = { handleType }\r\n                        setInputValue = { setInputValue } \r\n                        onFocus={ inputFocus }\r\n                        className = {`elementForm__label ${state.inputSelect === input.name  || input.value !== '' ? 'elementForm__label--active' : ''}`}\r\n                        name={input.name}\r\n                        type={input.type}\r\n                        labelText={input.labelText}\r\n                    /> \r\n                    { state.inputs[index].error.isError && <div className=\"Form__error\">{ state.inputs[index].error.details }</div> }\r\n                    </Fragment>\r\n                }\r\n                \r\n            )}\r\n            \r\n            {   (!!state.checks)\r\n                 &&\r\n                state.checks.map((check , index) => {\r\n                    return (\r\n                        <CheckBox\r\n                            key = {index}\r\n                            checked = {check.checked}\r\n                            conditions = {check.condition}\r\n                        />\r\n                    ) \r\n                })\r\n            }\r\n            {\r\n                (!!state.radios)\r\n                &&\r\n                \r\n                state.radios.map( (radio , index ) => {\r\n                    return (\r\n                        <Radio\r\n                            names = {radio.names}\r\n                            key ={`radio-${index}`}\r\n                            title = {radio.title}\r\n                            options = {radio.option}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            <ButtonForm\r\n                state = {state}\r\n                type = {state.button.type}\r\n                text = {state.button.text}\r\n            />\r\n        </form>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Form;","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\checkBox.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\button.tsx",["130","131"],"import {useState} from 'react';\r\n\r\nexport const ButtonForm = (props : any) => {\r\n    const [state, setstate] = useState({\r\n\r\n    })\r\n    return (\r\n        <button \r\n            className = 'button_Form'\r\n            type={ props.type }\r\n        >\r\n            {props.text}\r\n        </button>\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Publicidad.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\hooks\\useValidateInput.tsx",["132"],"import { useState }from 'react'\r\n\r\n\r\n\r\nexport const useValidateInput = ( initialState : any ) => {\r\n    \r\n    const [stateInput, setInputState ] = useState(initialState)\r\n    const handleInputChange = ( event : { target : HTMLInputElement }) => {\r\n        const { value, name } = event.target;\r\n        const error = {\r\n            isError : false ,\r\n            details : ''\r\n        } \r\n        let inputValue : string = '' ;\r\n        if( name === 'phone' && value !== '') {\r\n            if( /^[0-9]/.test(value)) {\r\n                inputValue = value.length > 9 ? value.slice(0,9) : value;\r\n            }\r\n            if (!/^9/.test(inputValue) || inputValue.length !== 9 ) {\r\n                error.isError = true;\r\n                error.details = 'Debe proporcionar un numero valido';\r\n            } \r\n        }\r\n        if( name === 'document' && value !== '') {\r\n            if( /^[0-9]/.test(value)) {\r\n                inputValue = value.length > 5 ? value.slice(0,5) : value;\r\n            }\r\n            if (inputValue.length !== 5 ) {\r\n                error.isError = true;\r\n                error.details = 'Debe proporcionar un N° de documento válido';\r\n            } \r\n\r\n        }\r\n        if( (name === 'name') && value !== '') {\r\n            if( /^[A-Za-z]/.test(value)) {\r\n                inputValue = value\r\n            }else {\r\n                error.isError = true;\r\n                error.details = 'Escriba un nombre válido';\r\n            }\r\n        }\r\n        if( (name === 'last_nameFather') && value !== '') {\r\n            if( /^[A-Za-z]/.test(value)) {\r\n                inputValue = value\r\n            }else {\r\n                error.isError = true;\r\n                error.details = 'Escriba su apellido paterno válido';\r\n            }\r\n        }\r\n        if( (name === 'last_nameMother') && value !== '') {\r\n            if( /^[A-Za-z]/.test(value)) {\r\n                inputValue = value\r\n            }else {\r\n                error.isError = true;\r\n                error.details = 'Escriba un apellido materno válido';\r\n            }\r\n        }\r\n        if( name === 'date' && value !== '') {\r\n            \r\n            if( !/\\d{4}([\\-/.])(0?[1-9]|1[1-2])\\1(3[01]|[12][0-9]|0?[1-9])/.test(value)) {\r\n                error.isError = true;\r\n                error.details = 'Debe ingresar una fecha válida';\r\n            }else {\r\n                inputValue =  value;\r\n            }\r\n        }\r\n        \r\n        if(inputValue === '') {\r\n            error.isError = true;\r\n        }\r\n        setInputState( {\r\n            ...stateInput,\r\n            value : inputValue,\r\n            error\r\n        })\r\n    };\r\n\r\n    return [  stateInput , handleInputChange ] ;\r\n}\r\n","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\selectComponent.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\List.tsx",["133","134"],"\r\nimport {useState} from 'react';\r\nimport icon1 from '../../../assets/gl_mobile-20x20-1.png';\r\nimport icon2 from '../../../assets/gl_mobile-20x20-1.png';\r\nimport icon3 from '../../../assets/gl_shield-20x20-1.png';\r\nimport icon4 from '../../../assets/gl_shield-20x20-1.png';\r\nexport const List = () => {\r\n\r\n    const [items, SetItems] = useState([\r\n        {\r\n            icon : `${icon1}`, \r\n            text : 'Cómpralo de manera fácil y rápida'\r\n        },\r\n        {\r\n            icon : `${icon2}`, \r\n            text : 'Cotiza y compra tu seguro 100% digital'\r\n        },\r\n        {\r\n            icon : `${icon3}`, \r\n            text : 'Hasta S/. 12 millones de cobertura anual'\r\n        },\r\n        {\r\n            icon : `${icon4}`, \r\n            text : 'Más de 300 clínicas en todo el Perú'\r\n        },\r\n    ]);\r\n    return (\r\n\r\n        <ul className=\"publicidad__list\">\r\n            {items.map( (item , i )=> (\r\n                <li \r\n                key = {`item-${i}`} \r\n                className =\"publicidad__item\">\r\n                    <img \r\n                        className=\"publicidad__icono\"\r\n                        src={item.icon} \r\n                    />\r\n                    {item.text}\r\n                </li>\r\n            ))}\r\n         </ul>\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\templates\\Template.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\CardPlan.tsx",["135"],"import { useState } from 'react';\r\n\r\ntype Plan = {\r\n    id:number,\r\n    text: string,\r\n    price: number,\r\n    range :string\r\n}\r\nexport const CardPlan = (props : { plan : Plan , classNameIcon : string , classNameCard: string, handlePlan: any } ) => {\r\n    const { plan , classNameIcon , handlePlan, classNameCard} = props; \r\n    const [state, setstate] = useState(\r\n        {\r\n           id : plan.id\r\n        }\r\n    )\r\n    return (\r\n       <div \r\n       onClick = { (e : any ) => handlePlan(state.id) }\r\n       className={classNameCard} >\r\n           <header>\r\n                <div className={classNameIcon}></div>\r\n           </header>\r\n           <div className='cardPlan__content'>\r\n               <h2 className='cardPlan__title'>{plan.text}</h2>\r\n               <div className=\"cardPlan__price\">\r\n                    <span>s/</span>\r\n                    <span>{plan.price}</span>\r\n               </div>\r\n                <span className='cardPlan__time'>{plan.range}</span>\r\n           </div>\r\n       </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Planes.tsx",["136","137","138"],"import React, { useState } from 'react'\r\nimport {CardPlan} from './atoms/CardPlan';\r\nimport { useEffect } from 'react';\r\n\r\ntype Plan= {\r\n    id: number,\r\n    text: string\r\n    price : number,\r\n    range: string\r\n    benefice?: any\r\n}\r\ntype Planes = {\r\n    planSelect: number ,\r\n    planes :Array<Plan> \r\n}\r\nexport const Planes = ( planes : { init : Planes ,hand : any} ) => {\r\n    const {init , hand } = planes \r\n    const [planeState, setPlanes] = useState(init)\r\n     \r\n    const handlePlan = (id:number) => {\r\n        setPlanes({\r\n            ...planeState,\r\n            planSelect : id\r\n        })\r\n    } \r\n    useEffect(() => {\r\n        hand(planeState.planSelect)\r\n    }, [planeState])\r\n\r\n    return (\r\n        <section className= 'planes'>\r\n            { planeState.planes.map ( (plan : Plan) => (\r\n                <CardPlan\r\n                    key = { plan.id }\r\n                    handlePlan = { handlePlan }\r\n                    classNameIcon={`cardPlan__icon  ${planeState.planSelect === plan.id  ? 'cardPlan__icon--active' : ''}`}\r\n                    classNameCard={`cardPlan ${planeState.planSelect === plan.id  ? 'cardPlan--active ' : ''}`}\r\n                    plan = {plan}\r\n                />\r\n            ))}\r\n            \r\n        </section>\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Beneficios.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\ListCard.tsx",["139"],"import { useState } from \"react\"\r\n\r\n\r\n\r\nexport const ListCard = ( props : {limit : number }) => {\r\n    const [state, setstate] = useState([\r\n        {\r\n            text:'Lima',\r\n            subtitle : '(zona de cobertura)'\r\n        },\r\n        {\r\n            text: '+30 clínicas',\r\n            subtitle : '(en red afiliada)'\r\n        },\r\n        {\r\n            text:'Médico a domicio'\r\n        },\r\n        {\r\n            text:'Checkeos preventivos'\r\n        },\r\n        {\r\n            text:'Reembolso Nacional'\r\n        },\r\n        {\r\n            text:'Reembolso Internacional'\r\n        },\r\n    ])\r\n    return (\r\n        <ul className=\"listCard\"> \r\n            {\r\n                state.map( (item , index )=> (\r\n                    <li \r\n                        key = {index}\r\n                    className={`listCard__item ${( index < props.limit*2 ) ? '': 'listCard__item--inactive'}`}>\r\n                        <div className=\"listCard__heart\"></div>\r\n                        <span className='listCard__text'>{item.text}</span>\r\n                        {item.subtitle &&<small>{item.subtitle}</small> }\r\n                    </li>           \r\n                ))\r\n            }         \r\n          \r\n        </ul>\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\Servicios.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\Steps.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\contexts\\appContext.tsx",[],"C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\templates\\Register.tsx",["140"],"import {useState} from 'react';\r\nimport Head from '../headMessage';\r\n\r\nimport { Steps } from '../atoms/Steps';\r\nimport payLogo2 from '../../../assets/Illustration.png'\r\nimport payLogo1 from '../../../assets/plan1.png'\r\nimport Form from '../Form';\r\nimport shadowIcon from '../../../assets/sombra.png';\r\n\r\nconst initialPlanes = {\r\n    planSelect : 1,\r\n    planes : [\r\n        {   \r\n            id: 1,\r\n            text: 'BÁSICO',\r\n            price : 160,\r\n            range: 'mensual',\r\n            benefice : {\r\n                title: 'Primer beneficio',\r\n                price: 1,\r\n                plan: 'PLAN BÁSICO',\r\n                icon: `${payLogo1}`\r\n            }\r\n        },\r\n        {\r\n            id:2,\r\n            text: 'AVANZADO',\r\n            price : 200,\r\n            range: 'mensual',\r\n            benefice : {\r\n                title: 'Cobertura máxima',\r\n                price: 5,\r\n                plan: 'PLAN AVANZADO',\r\n                icon: `${payLogo2}`\r\n            }\r\n        },\r\n       \r\n        {\r\n            id: 3,\r\n            text: 'PRÉMIUN',\r\n            price : 250,\r\n            range: 'mensual',\r\n            benefice : {\r\n                title: 'Primer beneficio',\r\n                price: 10,\r\n                plan: 'PLAN PRÉMIUN',\r\n                icon: `${payLogo1}`\r\n            }\r\n        },\r\n        {\r\n            id:4,\r\n            text: 'FULL',\r\n            price : 500,\r\n            range: 'mensual',\r\n            benefice : {\r\n                title: 'Primer beneficio',\r\n                price: 25,\r\n                plan: 'PLAN FULL',\r\n                icon: `${payLogo2}`\r\n            }\r\n        },\r\n       \r\n    ]\r\n\r\n}\r\nconst stateForm = {\r\n    inputSelect : '',\r\n    select : '',\r\n    inputs : [\r\n        {\r\n            name: 'document',\r\n            type: 'text',\r\n            labelText : 'Numero de documento',\r\n            value : '',\r\n            error : {\r\n                isError : false, \r\n                details: ''\r\n            }\r\n        },\r\n        {\r\n            name: 'date',\r\n            type: 'text',\r\n            labelText : 'Fecha de Nacimiento',\r\n            value : '',\r\n            error : {\r\n                isError : false,\r\n                details: '' \r\n            }\r\n         },\r\n        {\r\n           name: 'name',\r\n           type: 'text',\r\n           labelText : 'Nombres',\r\n           value : '',\r\n           error : {\r\n               isError : false, \r\n               details: ''\r\n           }\r\n        },\r\n        {\r\n           name: 'last_nameFather',\r\n           type: 'text',\r\n           labelText : 'Apellido Paterno',\r\n           value : '',\r\n           error : {\r\n               isError : false, \r\n               details: ''\r\n           }\r\n        },\r\n        {\r\n           name: 'last_nameMother',\r\n           type: 'text',\r\n           labelText : 'Apellido Materno',\r\n           value : '',\r\n           error : {\r\n               isError : false, \r\n               details: ''\r\n           }\r\n        },\r\n    ],\r\n    radios : [\r\n        {\r\n            title:'Género',\r\n            names: 'genero',\r\n            option : [\r\n                'masculino','femenido'\r\n            ]\r\n        },\r\n        {\r\n            names:'afiliados',\r\n            title: 'A quién vamos a asegurar',\r\n            option: ['Solo a mí', 'A mí y a mi familia']\r\n        }\r\n    ],\r\n    button : {\r\n        type : 'text',\r\n        text : 'Comencemos'\r\n    }\r\n} \r\nconst head = {\r\n    title: 'Hola ,',\r\n    resalt : 'Pepito',\r\n    subtitle: 'valida que los datos sean correctos'\r\n}\r\nconst RegisterTemplate = () =>  {\r\n\r\n    const [planes, setPlanes] = useState(initialPlanes)\r\n    const handlePlan = (id : number ) => {\r\n        setPlanes(\r\n           { ...planes ,\r\n            planSelect : id \r\n        })\r\n    } \r\n    return (\r\n        \r\n            <main className=\"template\">\r\n            <section className=\"template__wrapper\">\r\n                <div className=\"template__left\">\r\n                    <div className=\"template__img\">\r\n                        <img src={`${shadowIcon}`} alt=\"shadow\"/>\r\n                    </div>\r\n                </div>\r\n                <div  className=\"template__right\" >\r\n                    <Steps\r\n                        step='1'\r\n                    /> \r\n                    <div className=\"template__content\">\r\n                        <Head\r\n                            head = { head }\r\n                        />\r\n                        <Form\r\n                             initialState = { stateForm}\r\n                        />\r\n                       \r\n                    </div>\r\n                    \r\n                </div>\r\n            </section>\r\n\r\n            </main>\r\n        \r\n    )\r\n}\r\nexport default RegisterTemplate;","C:\\Users\\User\\Documents\\cotizador-salud\\src\\components\\partials\\atoms\\Radio.tsx",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":7,"column":10,"nodeType":"147","messageId":"148","endLine":7,"endColumn":14},{"ruleId":"149","severity":1,"message":"150","line":6,"column":5,"nodeType":"147","messageId":"151","endLine":6,"endColumn":15},{"ruleId":"149","severity":1,"message":"152","line":1,"column":10,"nodeType":"147","messageId":"151","endLine":1,"endColumn":20},{"ruleId":"149","severity":1,"message":"153","line":3,"column":10,"nodeType":"147","messageId":"151","endLine":3,"endColumn":18},{"ruleId":"149","severity":1,"message":"153","line":1,"column":20,"nodeType":"147","messageId":"151","endLine":1,"endColumn":28},{"ruleId":"154","severity":1,"message":"155","line":16,"column":8,"nodeType":"156","endLine":16,"endColumn":20,"suggestions":"157"},{"ruleId":"145","severity":1,"message":"158","line":12,"column":6,"nodeType":"147","messageId":"148","endLine":12,"endColumn":11},{"ruleId":"145","severity":1,"message":"159","line":36,"column":6,"nodeType":"147","messageId":"148","endLine":36,"endColumn":11},{"ruleId":"145","severity":1,"message":"160","line":43,"column":10,"nodeType":"147","messageId":"148","endLine":43,"endColumn":14},{"ruleId":"149","severity":1,"message":"161","line":4,"column":12,"nodeType":"147","messageId":"151","endLine":4,"endColumn":17},{"ruleId":"149","severity":1,"message":"162","line":4,"column":19,"nodeType":"147","messageId":"151","endLine":4,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":60,"column":26,"nodeType":"165","messageId":"166","endLine":60,"endColumn":27,"suggestions":"167"},{"ruleId":"149","severity":1,"message":"168","line":9,"column":19,"nodeType":"147","messageId":"151","endLine":9,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":34,"column":21,"nodeType":"171","endLine":37,"endColumn":23},{"ruleId":"149","severity":1,"message":"162","line":11,"column":19,"nodeType":"147","messageId":"151","endLine":11,"endColumn":27},{"ruleId":"145","severity":1,"message":"172","line":16,"column":14,"nodeType":"147","messageId":"148","endLine":16,"endColumn":20},{"ruleId":"149","severity":1,"message":"173","line":16,"column":43,"nodeType":"147","messageId":"151","endLine":16,"endColumn":49},{"ruleId":"154","severity":1,"message":"174","line":28,"column":8,"nodeType":"156","endLine":28,"endColumn":20,"suggestions":"175"},{"ruleId":"149","severity":1,"message":"162","line":6,"column":19,"nodeType":"147","messageId":"151","endLine":6,"endColumn":27},{"ruleId":"149","severity":1,"message":"176","line":148,"column":11,"nodeType":"147","messageId":"151","endLine":148,"endColumn":21},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"@typescript-eslint/no-redeclare","'Head' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'withRouter' is defined but never used.","unusedVar","'AppContext' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["179"],"'Input' is already defined.","'Radio' is already defined.","'Form' is already defined.","'state' is assigned a value but never used.","'setstate' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["180","181"],"'SetItems' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Planes' is already defined.","'Planes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hand'. Either include it or remove the dependency array.",["182"],"'handlePlan' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"messageId":"185","fix":"186","desc":"187"},{"messageId":"188","fix":"189","desc":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: [props, stateInput]",{"range":"193","text":"194"},"removeEscape",{"range":"195","text":"196"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"197","text":"198"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [hand, planeState]",{"range":"199","text":"200"},[421,433],"[props, stateInput]",[2153,2154],"",[2153,2153],"\\",[678,690],"[hand, planeState]"]